name: Scrape SBS zh-Hant

on:
  schedule:
    - cron: "15 * * * *"
  workflow_dispatch: {}

concurrency:
  group: scrape-sbs-zh-hant
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      REPO_SLUG: spiderwebponderentertainment/hkers-in-oz-data
      FEED_JSON: sbs_zh_hant.json
      FEED_XML:  sbs_zh_hant.xml

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Configure git
        run: |
          git config user.name "news-bot"
          git config user.email "news-bot@users.noreply.github.com"
          git config pull.rebase true
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      # Keep local main up to date before we run anything
      - name: Rebase onto latest main
        shell: bash
        run: |
          set -e
          git fetch origin main
          git rebase origin/main || (git rebase --abort && echo "Rebase conflict, aborting." && exit 1)

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r workers/requirements.txt

      - name: Run scraper (with retry)
        shell: bash
        run: |
          set -e
          n=0
          until [ $n -ge 3 ]; do
            if python workers/scrape_sbs_zh_hant.py; then
              break
            fi
            n=$((n+1))
            echo "Scraper failed (attempt $n), retrying in 10s…"
            sleep 10
          done
          if [ $n -ge 3 ]; then
            echo "Scraper failed after retries." >&2
            exit 1
          fi

      - name: Commit changes
        shell: bash
        run: |
          set -e
          git add -A
          if [[ -n "$(git status --porcelain)" ]]; then
            git commit -m "chore(sbs-zh-hant): update feeds $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          else
            echo "No changes to commit."
          fi

      - name: Push with retry
        shell: bash
        run: |
          set -e
          # If there are no commits ahead of origin/main, skip pushing
          AHEAD=$(git rev-list --count origin/main..HEAD || echo 0)
          if [[ "$AHEAD" -eq 0 ]]; then
            echo "Nothing to push."
            exit 0
          fi

          n=0
          until [[ $n -ge 3 ]]; do
            if git push; then
              echo "Pushed successfully."
              exit 0
            fi
            echo "Push failed, retrying… ($((n+1))/3)"
            # Bring remote changes in, keep our commits on top
            git fetch origin main
            if ! git rebase origin/main; then
              git rebase --abort
              echo "Rebase conflict — stopping to avoid an infinite loop."
              exit 1
            fi
            n=$((n+1))
            sleep 3
          done

          echo "Push still failing after retries."
          exit 1

# ───────── Push 完立即清 CDN，同步預熱 jsDelivr ─────────
      - name: Purge jsDelivr cache
        if: ${{ always() }}
        run: |
          set -e
          for path in "$FEED_JSON" "$FEED_XML"; do
            PURGE="https://purge.jsdelivr.net/gh/${REPO_SLUG}@main/${path}"
            echo "Purging: $PURGE"
            curl -fsS "$PURGE" || true
          done

      - name: Warm jsDelivr edge
        if: ${{ always() }}
        run: |
          for path in "$FEED_JSON" "$FEED_XML"; do
            WARM="https://cdn.jsdelivr.net/gh/${REPO_SLUG}@main/${path}"
            for i in 1 2 3; do
              echo "Warming $WARM (try $i)…"
              curl -fsS -H "Cache-Control: no-cache" "${WARM}?warm=$(date +%s%3N)" > /dev/null || true
              sleep 1
            done
          done
