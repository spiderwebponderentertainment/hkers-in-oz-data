name: Sync Google Sheet to JSON

on:
  schedule:
    - cron: "0 * * * *"        # 每小時
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # 👉 換成你 Google Sheet「發佈為 CSV」嘅 URL（注意 gid）
      SHEET_URL: "https://docs.google.com/spreadsheets/d/e/2PACX-1vSpt865HzuchDUxgZIPL3RBbZ-VneXtRFgM0Gt0fDAla2yk_Afh4t5iw-6a2U0lmqSiiQagcSE6Rjk9/pub?output=csv"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas

      - name: Fetch Google Sheet CSV
        run: |
          set -e
          CODE=$(curl -sSL -w "%{http_code}" -o sheet.csv "$SHEET_URL")
          echo "HTTP_STATUS=$CODE"
          if [ "$CODE" -ne 200 ]; then
            echo "Download failed ($CODE)" >&2
            exit 1
          fi
          echo "==== sheet.csv meta ===="
          wc -l sheet.csv || true
          echo "---- head ----"; head -n 5 sheet.csv || true

      - name: Convert CSV to JSON (new schema with zh/en names & tags)
        run: |
          import pandas as pd, json, re, sys

          # ---------- helpers ----------
          def norm_str(v):
              if v is None: return None
              s = str(v).strip()
              return s if s else None

          def split_list(v):
              s = norm_str(v)
              if not s: return []
              s = s.replace('；',';').replace('，',',')
              for sp in ['|',';','/','、','／']:
                  s = s.replace(sp, ',')
              return [p.strip() for p in s.split(',') if p.strip()]

          def norm_states(v):
              return [x.upper() for x in split_list(v)]

          def to_float(x):
              try:
                  return float(x) if x is not None and str(x).strip() != '' else None
              except Exception:
                  return None

          def norm_url(v):
              s = norm_str(v)
              if not s: return None
              if not re.match(r'^[a-zA-Z]+://', s):
                  s = 'https://' + s
              return s

          # ---------- load csv ----------
          try:
              df = pd.read_csv('sheet.csv', dtype=str, keep_default_na=False)
          except Exception as e:
              print('CSV read error:', e); sys.exit(1)

          # 建立「大小寫不敏感 + 去空白」嘅欄位映射
          colmap = {c.strip().lower(): c for c in df.columns}

          def get_col(*candidates):
              """按候選名從 df 取 Series；搵唔到就回空字串 Series"""
              for cand in candidates:
                  key = cand.strip().lower()
                  if key in colmap: 
                      return df[colmap[key]]
              return pd.Series(['']*len(df))

          # 可接受嘅表頭
          col_name_zh = get_col('namezh','name_zh','中文名','店名中文')
          col_name_en = get_col('nameen','name_en','英文名','店名英文')
          col_name_legacy = get_col('name')

          # ...（其餘 code 省略，保持同之前一樣，全部都有兩個空格縮排！）

          out = []
          for i in range(len(df)):
              # ---- names ----
              name_legacy = norm_str(col_name_legacy.iloc[i])
              nameZh = norm_str(col_name_zh.iloc[i])
              nameEn = norm_str(col_name_en.iloc[i])

              # 如果只有中文而中文格式似「中文 (English)」→ 自動拆英文
              if (not nameEn) and nameZh:
                  m = re.match(r'^\s*(.+?)\s*[\(（]\s*([A-Za-z0-9 .,\'+&/-]+)\s*[\)）]\s*$', nameZh)
                  if m:
                      nameZh = m.group(1).strip()
                      nameEn = m.group(2).strip()

              if not (name_legacy or nameZh or nameEn):
                  continue

              item = {
                  'name': name_legacy or (nameEn or nameZh or ''),
                  'nameZh': nameZh,
                  'nameEn': nameEn,
              }

              out.append(item)

          with open('businesses.json','w',encoding='utf-8') as f:
              json.dump(out, f, ensure_ascii=False, indent=2, sort_keys=True)

          print('Wrote businesses.json with', len(out), 'items')
