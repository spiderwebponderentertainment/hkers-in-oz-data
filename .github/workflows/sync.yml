name: Sync Google Sheet to JSON

on:
  schedule:
    - cron: "0 * * * *"           # 每小時執行一次
  workflow_dispatch:               # 允許手動觸發

permissions:
  contents: write                  # 需要推送內容/更新分支
  pull-requests: write             # 需要建立/合併 PR

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas

      - name: Fetch Google Sheet CSV
        run: |
          set -e
          # 👉 換成你 Google Sheet「發佈為 CSV」連結
          URL="https://docs.google.com/spreadsheets/d/e/2PACX-1vSpt865HzuchDUxgZIPL3RBbZ-VneXtRFgM0Gt0fDAla2yk_Afh4t5iw-6a2U0lmqSiiQagcSE6Rjk9/pub?gid=0&single=true&output=csv"
          CODE=$(curl -sSL -w "%{http_code}" -o sheet.csv "$URL")
          echo "HTTP_STATUS=$CODE"
          if [ "$CODE" -ne 200 ]; then
            echo "Download failed ($CODE)" >&2
            exit 1
          fi
          echo "==== sheet.csv meta ===="
          wc -l sheet.csv || true
          echo "---- head ----"; head -n 5 sheet.csv || true

      - name: Convert CSV to JSON
        run: |
          python - <<'PY'
          import pandas as pd, json, re, sys

          # 1) 全欄位以字串載入，避免電話被去掉 leading 0
          try:
              df = pd.read_csv('sheet.csv', dtype=str, keep_default_na=False)
          except Exception as e:
              print('CSV read error:', e); sys.exit(1)
          print(f'Rows loaded: {len(df)}')

          def norm_str(v):
              if v is None: return None
              s = str(v).strip()
              return s if s else None

          def split_list(v):
              s = norm_str(v)
              if not s: return []
              s = s.replace('；',';').replace('，',',')
              for sp in ['|',';','/','、']:
                  s = s.replace(sp, ',')
              return [p.strip() for p in s.split(',') if p.strip()]

          def norm_states(v):
              return [x.upper() for x in split_list(v)]

          def norm_phone(v):
              # 保留原樣，避免 0 / +61 被吃掉
              return norm_str(v)

          def norm_website(v):
              s = norm_str(v)
              if not s: return None
              if not re.match(r'^[a-zA-Z]+://', s):
                  s = 'https://' + s
              return s

          def to_float(x):
              try:
                  return float(x) if x is not None else None
              except Exception:
                  return None

          out = []
          for _, r in df.iterrows():
              name = norm_str(r.get('name'))
              if not name: continue

              item = {
                  'name': name,
                  'category': norm_str(r.get('category')) or 'uncategorized',
                  'tags': split_list(r.get('tags')),
                  'area': norm_str(r.get('area')),
                  'address': norm_str(r.get('address')),
                  'email': norm_str(r.get('email')),
                  'phone': norm_phone(r.get('phone')),
                  'website': norm_website(r.get('website')),

                  # ====== 新增欄位：分店分組／分店名 ======
                  # chainId：同一品牌/集團用同一個 id（例如 "cha-time" 或 "BUS-001"）
                  # branchName：顯示分店名稱（例如 "Kogarah 分店"）
                  'chainId': norm_str(r.get('chainId')),
                  'branchName': norm_str(r.get('branchName')),
              }

              # states / state
              states = norm_states(r.get('states'))
              state  = norm_str(r.get('state'))
              item['states'] = states if states else ([state.upper()] if state else [])

              # cities / city
              cities = split_list(r.get('cities'))
              city   = norm_str(r.get('city'))
              if cities: item['cities'] = cities
              elif city: item['cities'] = [city]

              # 座標（如有）
              lat = norm_str(r.get('lat')); lng = norm_str(r.get('lng'))
              if lat is not None or lng is not None:
                  item['lat'] = to_float(lat)
                  item['lng'] = to_float(lng)

              # 廣告欄位（可選）
              isSponsored = norm_str(r.get('isSponsored'))
              if isSponsored is not None:
                  item['isSponsored'] = isSponsored.lower() in ('1','true','yes','y')
              for k in ['sponsorTier','sponsorStart','sponsorEnd','adLink','adNote']:
                  v = norm_str(r.get(k))
                  if k == 'adLink': v = norm_website(v)
                  if v is not None: item[k] = v

              out.append(item)

          with open('businesses.json','w',encoding='utf-8') as f:
              json.dump(out, f, ensure_ascii=False, indent=2, sort_keys=True)
          print('Wrote businesses.json with', len(out), 'items')
          PY

      - name: Show diff
        run: |
          echo "==== git status ===="
          git status --porcelain
          echo "==== diff (businesses.json) ===="
          git --no-pager diff -- businesses.json || true

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore: sync businesses.json from Google Sheet"
          title: "chore: sync businesses.json from Google Sheet"
          body: |
            Auto-generated by **Sync Google Sheet to JSON** workflow.
            - Source: Google Sheet (published CSV)
            - Output: `businesses.json`
          branch: automation/sheet-sync
          token: ${{ secrets.GITHUB_TOKEN }}
          delete-branch: true
          add-paths: |
            businesses.json

      # 啟用 auto-merge（可選）
      - name: Enable auto-merge on PR
        if: ${{ steps.cpr.outputs.pull-request-number != '' }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash

      # 立即嘗試合併（可被保護分支規則阻擋）
      - name: Merge PR via API
        if: ${{ steps.cpr.outputs.pull-request-number != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = Number('${{ steps.cpr.outputs.pull-request-number }}');
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            try {
              const { data } = await github.rest.pulls.merge({
                owner, repo, pull_number: pr,
                merge_method: 'squash'
              });
              core.info(`Merged PR #${pr}: ${data.sha}`);
            } catch (e) {
              core.warning(`Merge failed (maybe branch protection requires review). Details: ${e.message}`);
            }
